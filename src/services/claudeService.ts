import Anthropic from '@anthropic-ai/sdk';

// Cl√© API Claude - assure-toi qu'elle est valide
const CLAUDE_API_KEY = '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';

let anthropic: Anthropic;

try {
  anthropic = new Anthropic({
    apiKey: CLAUDE_API_KEY,
    dangerouslyAllowBrowser: true
  });
} catch (error) {
  console.error('‚ùå Erreur initialisation Claude:', error);
}

export interface StoryResult {
  transcriptions: string[];
  story: string;
  title: string;
  summary: string;
}

export const claudeService = {
  // Simulation de transcription (Claude n'a pas encore de support audio direct)
  transcribeAudio: async (audioBlob: Blob): Promise<string> => {
    try {
      console.log('üé§ Simulating audio transcription...');
      
      // Pour le moment, on retourne une transcription simul√©e
      // Dans une vraie impl√©mentation, on utiliserait un service de transcription comme Whisper
      const simulatedTranscription = `
Voici le contenu transcrit de l'enregistrement audio. 
Cette transcription est simul√©e car Claude ne supporte pas encore l'audio directement.
Dans une vraie impl√©mentation, vous devriez utiliser un service comme OpenAI Whisper 
ou Google Speech-to-Text pour transcrire l'audio avant de l'envoyer √† Claude.

Dur√©e de l'audio: ${Math.round(audioBlob.size / 1000)}KB
Type: ${audioBlob.type}

Contenu simul√©: "Voici mes souvenirs d'enfance. Je me rappelle quand nous allions chez ma grand-m√®re..."
      `.trim();
      
      console.log('‚úÖ Simulated transcription completed');
      return simulatedTranscription;
      
    } catch (error) {
      console.error('‚ùå Error transcribing audio:', error);
      throw new Error(`√âchec de la transcription: ${error.message}`);
    }
  },

  // G√©n√©ration d'histoire √† partir des transcriptions
  generateStory: async (transcriptions: string[], chapterTitle: string, chapterDescription: string): Promise<StoryResult> => {
    try {
      console.log('üìù Generating story with Claude...');
      
      // Mode simulation pour tester le syst√®me
      console.log('üîß Mode simulation activ√© (cl√© API √† v√©rifier)');
      
      // Simuler une belle histoire bas√©e sur les transcriptions
      const simulatedStory = {
        title: `Les Souvenirs de ${chapterTitle}`,
        story: `Il √©tait une fois, dans les m√©andres de ma m√©moire, des moments pr√©cieux qui r√©sonnent encore aujourd'hui. 

${transcriptions.map((transcription, index) => {
  return `Cette histoire commence par ce souvenir vivace : "${transcription.substring(0, 100)}..." 

Chaque d√©tail de cette √©poque reste grav√© dans mon c≈ìur. Les √©motions d'alors, les visages aim√©s, les lieux familiers - tout cela forme une tapisserie de souvenirs qui raconte l'histoire de ma vie.`;
}).join('\n\n')}

Aujourd'hui, en revisitant ces moments √† travers mes mots, je r√©alise combien ces exp√©riences ont fa√ßonn√© qui je suis devenu. Chaque souvenir est un tr√©sor, chaque √©motion une le√ßon, chaque histoire un h√©ritage pour les g√©n√©rations futures.

C'est ainsi que se termine ce chapitre de mes m√©moires, mais l'histoire continue, riche de tous ces moments partag√©s et de l'amour qui les unit.`,
        summary: `Un r√©cit touchant de souvenirs personnels centr√© sur ${chapterTitle}, transformant les t√©moignages oraux en une belle narration structur√©e qui capture l'essence √©motionnelle des moments partag√©s.`
      };
      
      // Ajouter un d√©lai pour simuler le traitement
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      console.log('‚úÖ Simulated story generated successfully');
      return {
        transcriptions,
        story: simulatedStory.story,
        title: simulatedStory.title,
        summary: simulatedStory.summary
      };
      
    } catch (error) {
      console.error('‚ùå Error generating story:', error);
      throw new Error(`√âchec de la g√©n√©ration d'histoire: ${error.message}`);
    }
  },

  // Processus complet: transcription + g√©n√©ration d'histoire
  processChapterAudios: async (audioUrls: string[], chapterTitle: string, chapterDescription: string): Promise<StoryResult> => {
    try {
      console.log('üéØ Starting complete audio processing...');
      console.log(`üìÅ Processing ${audioUrls.length} audio files for chapter: ${chapterTitle}`);
      
      // T√©l√©charger et transcire tous les audios
      const transcriptions: string[] = [];
      
      for (let i = 0; i < audioUrls.length; i++) {
        console.log(`üé§ Processing audio ${i + 1}/${audioUrls.length}`);
        
        // T√©l√©charger l'audio
        const response = await fetch(audioUrls[i]);
        if (!response.ok) {
          throw new Error(`Impossible de t√©l√©charger l'audio ${i + 1}`);
        }
        
        const audioBlob = await response.blob();
        
        // Transcire
        const transcription = await claudeService.transcribeAudio(audioBlob);
        transcriptions.push(transcription);
      }
      
      // G√©n√©rer l'histoire
      console.log('üìñ Generating story from transcriptions...');
      const storyResult = await claudeService.generateStory(transcriptions, chapterTitle, chapterDescription);
      
      console.log('‚úÖ Complete processing finished');
      return storyResult;
      
    } catch (error) {
      console.error('‚ùå Error in complete processing:', error);
      throw error;
    }
  }
};