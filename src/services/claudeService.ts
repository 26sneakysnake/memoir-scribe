import Anthropic from '@anthropic-ai/sdk';

const CLAUDE_API_KEY = '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';

const anthropic = new Anthropic({
  apiKey: CLAUDE_API_KEY,
  dangerouslyAllowBrowser: true // Pour utilisation frontend uniquement
});

export interface StoryResult {
  transcriptions: string[];
  story: string;
  title: string;
  summary: string;
}

export const claudeService = {
  // Simulation de transcription (Claude n'a pas encore de support audio direct)
  transcribeAudio: async (audioBlob: Blob): Promise<string> => {
    try {
      console.log('üé§ Simulating audio transcription...');
      
      // Pour le moment, on retourne une transcription simul√©e
      // Dans une vraie impl√©mentation, on utiliserait un service de transcription comme Whisper
      const simulatedTranscription = `
Voici le contenu transcrit de l'enregistrement audio. 
Cette transcription est simul√©e car Claude ne supporte pas encore l'audio directement.
Dans une vraie impl√©mentation, vous devriez utiliser un service comme OpenAI Whisper 
ou Google Speech-to-Text pour transcrire l'audio avant de l'envoyer √† Claude.

Dur√©e de l'audio: ${Math.round(audioBlob.size / 1000)}KB
Type: ${audioBlob.type}

Contenu simul√©: "Voici mes souvenirs d'enfance. Je me rappelle quand nous allions chez ma grand-m√®re..."
      `.trim();
      
      console.log('‚úÖ Simulated transcription completed');
      return simulatedTranscription;
      
    } catch (error) {
      console.error('‚ùå Error transcribing audio:', error);
      throw new Error(`√âchec de la transcription: ${error.message}`);
    }
  },

  // G√©n√©ration d'histoire √† partir des transcriptions
  generateStory: async (transcriptions: string[], chapterTitle: string, chapterDescription: string): Promise<StoryResult> => {
    try {
      console.log('üìù Generating story with Claude...');
      
      const prompt = `
Tu es un auteur professionnel sp√©cialis√© dans la transformation de t√©moignages oraux en belles histoires structur√©es.

CONTEXTE DU CHAPITRE:
Titre: "${chapterTitle}"
Description: "${chapterDescription}"

TRANSCRIPTIONS √Ä TRANSFORMER:
${transcriptions.map((t, i) => `\n--- Enregistrement ${i + 1} ---\n${t}`).join('\n')}

MISSION:
Transforme ces transcriptions en une belle histoire narrative et coh√©rente. 

INSTRUCTIONS:
1. Conserve tous les d√©tails importants et √©motions
2. Cr√©e une structure narrative fluide avec introduction, d√©veloppement et conclusion
3. Am√©liore le style litt√©raire tout en gardant l'authenticit√© de la voix
4. Corrige les r√©p√©titions et h√©sitations naturelles de l'oral
5. Organise chronologiquement si possible
6. Ajoute des transitions √©l√©gantes entre les diff√©rents segments

STYLE:
- Narratif et engageant
- Langue fran√ßaise soign√©e
- Pr√©serve le ton personnel et √©motionnel
- Accessible et captivant

Retourne ta r√©ponse au format JSON avec:
{
  "title": "Un titre √©vocateur pour cette histoire",
  "story": "L'histoire compl√®te transform√©e",
  "summary": "Un r√©sum√© en 2-3 phrases"
}
`;

      const message = await anthropic.messages.create({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 8000,
        messages: [{
          role: 'user',
          content: prompt
        }]
      });

      const response = message.content[0].type === 'text' ? message.content[0].text : '';
      
      // Parser la r√©ponse JSON
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Format de r√©ponse invalide');
      }
      
      const result = JSON.parse(jsonMatch[0]);
      
      console.log('‚úÖ Story generated successfully');
      return {
        transcriptions,
        story: result.story,
        title: result.title,
        summary: result.summary
      };
      
    } catch (error) {
      console.error('‚ùå Error generating story:', error);
      throw new Error(`√âchec de la g√©n√©ration d'histoire: ${error.message}`);
    }
  },

  // Processus complet: transcription + g√©n√©ration d'histoire
  processChapterAudios: async (audioUrls: string[], chapterTitle: string, chapterDescription: string): Promise<StoryResult> => {
    try {
      console.log('üéØ Starting complete audio processing...');
      console.log(`üìÅ Processing ${audioUrls.length} audio files for chapter: ${chapterTitle}`);
      
      // T√©l√©charger et transcire tous les audios
      const transcriptions: string[] = [];
      
      for (let i = 0; i < audioUrls.length; i++) {
        console.log(`üé§ Processing audio ${i + 1}/${audioUrls.length}`);
        
        // T√©l√©charger l'audio
        const response = await fetch(audioUrls[i]);
        if (!response.ok) {
          throw new Error(`Impossible de t√©l√©charger l'audio ${i + 1}`);
        }
        
        const audioBlob = await response.blob();
        
        // Transcire
        const transcription = await claudeService.transcribeAudio(audioBlob);
        transcriptions.push(transcription);
      }
      
      // G√©n√©rer l'histoire
      console.log('üìñ Generating story from transcriptions...');
      const storyResult = await claudeService.generateStory(transcriptions, chapterTitle, chapterDescription);
      
      console.log('‚úÖ Complete processing finished');
      return storyResult;
      
    } catch (error) {
      console.error('‚ùå Error in complete processing:', error);
      throw error;
    }
  }
};